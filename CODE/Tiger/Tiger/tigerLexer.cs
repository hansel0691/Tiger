//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g 2014-05-18 14:44:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class tigerLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ALIAS_DEC=4;
	public const int AND=5;
	public const int ARGUMENT=6;
	public const int ARRAY=7;
	public const int ARRAY_DEC=8;
	public const int ARRAY_FF_INDEX=9;
	public const int ARRAY_INDEX=10;
	public const int ARRAY_INIT=11;
	public const int ASSIGN=12;
	public const int BREAK=13;
	public const int CB=14;
	public const int CBRACE=15;
	public const int CC=16;
	public const int COLON=17;
	public const int COMMA=18;
	public const int COMMENT=19;
	public const int CP=20;
	public const int DEC_DIGIT=21;
	public const int DEC_LIST=22;
	public const int DIF=23;
	public const int DIV=24;
	public const int DO=25;
	public const int DOT=26;
	public const int DQUOTE=27;
	public const int ELSE=28;
	public const int END=29;
	public const int EQUAL=30;
	public const int ESC_SEQ=31;
	public const int EXPR_SEQ=32;
	public const int FIELDS_DEC=33;
	public const int FIELD_ACCESS=34;
	public const int FIELD_ASSIGN=35;
	public const int FIELD_DEC=36;
	public const int FOR=37;
	public const int FUNCTION=38;
	public const int FUNCTION_CALL=39;
	public const int FUNCTION_DEC=40;
	public const int GT=41;
	public const int GTE=42;
	public const int ID=43;
	public const int ID_ACCESS=44;
	public const int IF=45;
	public const int IN=46;
	public const int INT=47;
	public const int LET=48;
	public const int LETTER=49;
	public const int LT=50;
	public const int LTE=51;
	public const int MINUS=52;
	public const int MULT=53;
	public const int NIL=54;
	public const int OB=55;
	public const int OBRACE=56;
	public const int OC=57;
	public const int OF=58;
	public const int OP=59;
	public const int OR=60;
	public const int PLUS=61;
	public const int PROC_DEC=62;
	public const int PROGRAM=63;
	public const int RECORD_DEC=64;
	public const int RECORD_INIT=65;
	public const int SEMI=66;
	public const int STRING=67;
	public const int THEN=68;
	public const int TO=69;
	public const int TYPE=70;
	public const int UNARY_MINUS=71;
	public const int UNICODE_ESC=72;
	public const int VAR=73;
	public const int VAR_DEC=74;
	public const int WHILE=75;
	public const int WS=76;

    // delegates
    // delegators

	public tigerLexer()
	{
		OnCreated();
	}

	public tigerLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public tigerLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:7:5: ( '&' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:7:7: '&'
			{
			DebugLocation(7, 7);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ARRAY();
	partial void LeaveRule_ARRAY();

	// $ANTLR start "ARRAY"
	[GrammarRule("ARRAY")]
	private void mARRAY()
	{
		EnterRule_ARRAY();
		EnterRule("ARRAY", 2);
		TraceIn("ARRAY", 2);
		try
		{
			int _type = ARRAY;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:8:7: ( 'array' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:8:9: 'array'
			{
			DebugLocation(8, 9);
			Match("array"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ARRAY", 2);
			LeaveRule("ARRAY", 2);
			LeaveRule_ARRAY();
		}
	}
	// $ANTLR end "ARRAY"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 3);
		TraceIn("ASSIGN", 3);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:9:8: ( ':=' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:9:10: ':='
			{
			DebugLocation(9, 10);
			Match(":="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 3);
			LeaveRule("ASSIGN", 3);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_BREAK();
	partial void LeaveRule_BREAK();

	// $ANTLR start "BREAK"
	[GrammarRule("BREAK")]
	private void mBREAK()
	{
		EnterRule_BREAK();
		EnterRule("BREAK", 4);
		TraceIn("BREAK", 4);
		try
		{
			int _type = BREAK;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:10:7: ( 'break' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:10:9: 'break'
			{
			DebugLocation(10, 9);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BREAK", 4);
			LeaveRule("BREAK", 4);
			LeaveRule_BREAK();
		}
	}
	// $ANTLR end "BREAK"

	partial void EnterRule_CB();
	partial void LeaveRule_CB();

	// $ANTLR start "CB"
	[GrammarRule("CB")]
	private void mCB()
	{
		EnterRule_CB();
		EnterRule("CB", 5);
		TraceIn("CB", 5);
		try
		{
			int _type = CB;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:11:4: ( ']' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:11:6: ']'
			{
			DebugLocation(11, 6);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CB", 5);
			LeaveRule("CB", 5);
			LeaveRule_CB();
		}
	}
	// $ANTLR end "CB"

	partial void EnterRule_CBRACE();
	partial void LeaveRule_CBRACE();

	// $ANTLR start "CBRACE"
	[GrammarRule("CBRACE")]
	private void mCBRACE()
	{
		EnterRule_CBRACE();
		EnterRule("CBRACE", 6);
		TraceIn("CBRACE", 6);
		try
		{
			int _type = CBRACE;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:12:8: ( '}' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:12:10: '}'
			{
			DebugLocation(12, 10);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CBRACE", 6);
			LeaveRule("CBRACE", 6);
			LeaveRule_CBRACE();
		}
	}
	// $ANTLR end "CBRACE"

	partial void EnterRule_CC();
	partial void LeaveRule_CC();

	// $ANTLR start "CC"
	[GrammarRule("CC")]
	private void mCC()
	{
		EnterRule_CC();
		EnterRule("CC", 7);
		TraceIn("CC", 7);
		try
		{
			int _type = CC;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:13:4: ( '*/' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:13:6: '*/'
			{
			DebugLocation(13, 6);
			Match("*/"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CC", 7);
			LeaveRule("CC", 7);
			LeaveRule_CC();
		}
	}
	// $ANTLR end "CC"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 8);
		TraceIn("COLON", 8);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:14:7: ( ':' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:14:9: ':'
			{
			DebugLocation(14, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 8);
			LeaveRule("COLON", 8);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 9);
		TraceIn("COMMA", 9);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:15:7: ( ',' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:15:9: ','
			{
			DebugLocation(15, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 9);
			LeaveRule("COMMA", 9);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_CP();
	partial void LeaveRule_CP();

	// $ANTLR start "CP"
	[GrammarRule("CP")]
	private void mCP()
	{
		EnterRule_CP();
		EnterRule("CP", 10);
		TraceIn("CP", 10);
		try
		{
			int _type = CP;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:16:4: ( ')' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:16:6: ')'
			{
			DebugLocation(16, 6);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CP", 10);
			LeaveRule("CP", 10);
			LeaveRule_CP();
		}
	}
	// $ANTLR end "CP"

	partial void EnterRule_DIF();
	partial void LeaveRule_DIF();

	// $ANTLR start "DIF"
	[GrammarRule("DIF")]
	private void mDIF()
	{
		EnterRule_DIF();
		EnterRule("DIF", 11);
		TraceIn("DIF", 11);
		try
		{
			int _type = DIF;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:17:5: ( '<>' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:17:7: '<>'
			{
			DebugLocation(17, 7);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIF", 11);
			LeaveRule("DIF", 11);
			LeaveRule_DIF();
		}
	}
	// $ANTLR end "DIF"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 12);
		TraceIn("DIV", 12);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:18:5: ( '/' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:18:7: '/'
			{
			DebugLocation(18, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 12);
			LeaveRule("DIV", 12);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_DO();
	partial void LeaveRule_DO();

	// $ANTLR start "DO"
	[GrammarRule("DO")]
	private void mDO()
	{
		EnterRule_DO();
		EnterRule("DO", 13);
		TraceIn("DO", 13);
		try
		{
			int _type = DO;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:19:4: ( 'do' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:19:6: 'do'
			{
			DebugLocation(19, 6);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DO", 13);
			LeaveRule("DO", 13);
			LeaveRule_DO();
		}
	}
	// $ANTLR end "DO"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 14);
		TraceIn("DOT", 14);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:20:5: ( '.' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:20:7: '.'
			{
			DebugLocation(20, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 14);
			LeaveRule("DOT", 14);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_DQUOTE();
	partial void LeaveRule_DQUOTE();

	// $ANTLR start "DQUOTE"
	[GrammarRule("DQUOTE")]
	private void mDQUOTE()
	{
		EnterRule_DQUOTE();
		EnterRule("DQUOTE", 15);
		TraceIn("DQUOTE", 15);
		try
		{
			int _type = DQUOTE;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:21:8: ( '\\\"' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:21:10: '\\\"'
			{
			DebugLocation(21, 10);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DQUOTE", 15);
			LeaveRule("DQUOTE", 15);
			LeaveRule_DQUOTE();
		}
	}
	// $ANTLR end "DQUOTE"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 16);
		TraceIn("ELSE", 16);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:22:6: ( 'else' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:22:8: 'else'
			{
			DebugLocation(22, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 16);
			LeaveRule("ELSE", 16);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 17);
		TraceIn("END", 17);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:23:5: ( 'end' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:23:7: 'end'
			{
			DebugLocation(23, 7);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 17);
			LeaveRule("END", 17);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 18);
		TraceIn("EQUAL", 18);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:24:7: ( '=' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:24:9: '='
			{
			DebugLocation(24, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 18);
			LeaveRule("EQUAL", 18);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_FOR();
	partial void LeaveRule_FOR();

	// $ANTLR start "FOR"
	[GrammarRule("FOR")]
	private void mFOR()
	{
		EnterRule_FOR();
		EnterRule("FOR", 19);
		TraceIn("FOR", 19);
		try
		{
			int _type = FOR;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:25:5: ( 'for' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:25:7: 'for'
			{
			DebugLocation(25, 7);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FOR", 19);
			LeaveRule("FOR", 19);
			LeaveRule_FOR();
		}
	}
	// $ANTLR end "FOR"

	partial void EnterRule_FUNCTION();
	partial void LeaveRule_FUNCTION();

	// $ANTLR start "FUNCTION"
	[GrammarRule("FUNCTION")]
	private void mFUNCTION()
	{
		EnterRule_FUNCTION();
		EnterRule("FUNCTION", 20);
		TraceIn("FUNCTION", 20);
		try
		{
			int _type = FUNCTION;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:26:10: ( 'function' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:26:12: 'function'
			{
			DebugLocation(26, 12);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION", 20);
			LeaveRule("FUNCTION", 20);
			LeaveRule_FUNCTION();
		}
	}
	// $ANTLR end "FUNCTION"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 21);
		TraceIn("GT", 21);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:27:4: ( '>' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:27:6: '>'
			{
			DebugLocation(27, 6);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 21);
			LeaveRule("GT", 21);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_GTE();
	partial void LeaveRule_GTE();

	// $ANTLR start "GTE"
	[GrammarRule("GTE")]
	private void mGTE()
	{
		EnterRule_GTE();
		EnterRule("GTE", 22);
		TraceIn("GTE", 22);
		try
		{
			int _type = GTE;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:28:5: ( '>=' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:28:7: '>='
			{
			DebugLocation(28, 7);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GTE", 22);
			LeaveRule("GTE", 22);
			LeaveRule_GTE();
		}
	}
	// $ANTLR end "GTE"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 23);
		TraceIn("IF", 23);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:29:4: ( 'if' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:29:6: 'if'
			{
			DebugLocation(29, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 23);
			LeaveRule("IF", 23);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 24);
		TraceIn("IN", 24);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:30:4: ( 'in' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:30:6: 'in'
			{
			DebugLocation(30, 6);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 24);
			LeaveRule("IN", 24);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 25);
		TraceIn("LET", 25);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:31:5: ( 'let' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:31:7: 'let'
			{
			DebugLocation(31, 7);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 25);
			LeaveRule("LET", 25);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 26);
		TraceIn("LT", 26);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:32:4: ( '<' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:32:6: '<'
			{
			DebugLocation(32, 6);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 26);
			LeaveRule("LT", 26);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_LTE();
	partial void LeaveRule_LTE();

	// $ANTLR start "LTE"
	[GrammarRule("LTE")]
	private void mLTE()
	{
		EnterRule_LTE();
		EnterRule("LTE", 27);
		TraceIn("LTE", 27);
		try
		{
			int _type = LTE;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:33:5: ( '<=' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:33:7: '<='
			{
			DebugLocation(33, 7);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LTE", 27);
			LeaveRule("LTE", 27);
			LeaveRule_LTE();
		}
	}
	// $ANTLR end "LTE"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 28);
		TraceIn("MINUS", 28);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:34:7: ( '-' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:34:9: '-'
			{
			DebugLocation(34, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 28);
			LeaveRule("MINUS", 28);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MULT();
	partial void LeaveRule_MULT();

	// $ANTLR start "MULT"
	[GrammarRule("MULT")]
	private void mMULT()
	{
		EnterRule_MULT();
		EnterRule("MULT", 29);
		TraceIn("MULT", 29);
		try
		{
			int _type = MULT;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:35:6: ( '*' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:35:8: '*'
			{
			DebugLocation(35, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULT", 29);
			LeaveRule("MULT", 29);
			LeaveRule_MULT();
		}
	}
	// $ANTLR end "MULT"

	partial void EnterRule_NIL();
	partial void LeaveRule_NIL();

	// $ANTLR start "NIL"
	[GrammarRule("NIL")]
	private void mNIL()
	{
		EnterRule_NIL();
		EnterRule("NIL", 30);
		TraceIn("NIL", 30);
		try
		{
			int _type = NIL;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:36:5: ( 'nil' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:36:7: 'nil'
			{
			DebugLocation(36, 7);
			Match("nil"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NIL", 30);
			LeaveRule("NIL", 30);
			LeaveRule_NIL();
		}
	}
	// $ANTLR end "NIL"

	partial void EnterRule_OB();
	partial void LeaveRule_OB();

	// $ANTLR start "OB"
	[GrammarRule("OB")]
	private void mOB()
	{
		EnterRule_OB();
		EnterRule("OB", 31);
		TraceIn("OB", 31);
		try
		{
			int _type = OB;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:37:4: ( '[' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:37:6: '['
			{
			DebugLocation(37, 6);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OB", 31);
			LeaveRule("OB", 31);
			LeaveRule_OB();
		}
	}
	// $ANTLR end "OB"

	partial void EnterRule_OBRACE();
	partial void LeaveRule_OBRACE();

	// $ANTLR start "OBRACE"
	[GrammarRule("OBRACE")]
	private void mOBRACE()
	{
		EnterRule_OBRACE();
		EnterRule("OBRACE", 32);
		TraceIn("OBRACE", 32);
		try
		{
			int _type = OBRACE;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:38:8: ( '{' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:38:10: '{'
			{
			DebugLocation(38, 10);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OBRACE", 32);
			LeaveRule("OBRACE", 32);
			LeaveRule_OBRACE();
		}
	}
	// $ANTLR end "OBRACE"

	partial void EnterRule_OC();
	partial void LeaveRule_OC();

	// $ANTLR start "OC"
	[GrammarRule("OC")]
	private void mOC()
	{
		EnterRule_OC();
		EnterRule("OC", 33);
		TraceIn("OC", 33);
		try
		{
			int _type = OC;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:39:4: ( '/*' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:39:6: '/*'
			{
			DebugLocation(39, 6);
			Match("/*"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OC", 33);
			LeaveRule("OC", 33);
			LeaveRule_OC();
		}
	}
	// $ANTLR end "OC"

	partial void EnterRule_OF();
	partial void LeaveRule_OF();

	// $ANTLR start "OF"
	[GrammarRule("OF")]
	private void mOF()
	{
		EnterRule_OF();
		EnterRule("OF", 34);
		TraceIn("OF", 34);
		try
		{
			int _type = OF;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:40:4: ( 'of' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:40:6: 'of'
			{
			DebugLocation(40, 6);
			Match("of"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OF", 34);
			LeaveRule("OF", 34);
			LeaveRule_OF();
		}
	}
	// $ANTLR end "OF"

	partial void EnterRule_OP();
	partial void LeaveRule_OP();

	// $ANTLR start "OP"
	[GrammarRule("OP")]
	private void mOP()
	{
		EnterRule_OP();
		EnterRule("OP", 35);
		TraceIn("OP", 35);
		try
		{
			int _type = OP;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:41:4: ( '(' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:41:6: '('
			{
			DebugLocation(41, 6);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP", 35);
			LeaveRule("OP", 35);
			LeaveRule_OP();
		}
	}
	// $ANTLR end "OP"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 36);
		TraceIn("OR", 36);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:42:4: ( '|' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:42:6: '|'
			{
			DebugLocation(42, 6);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 36);
			LeaveRule("OR", 36);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 37);
		TraceIn("PLUS", 37);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:43:6: ( '+' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:43:8: '+'
			{
			DebugLocation(43, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 37);
			LeaveRule("PLUS", 37);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 38);
		TraceIn("SEMI", 38);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:44:6: ( ';' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:44:8: ';'
			{
			DebugLocation(44, 8);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 38);
			LeaveRule("SEMI", 38);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 39);
		TraceIn("THEN", 39);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:45:6: ( 'then' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:45:8: 'then'
			{
			DebugLocation(45, 8);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 39);
			LeaveRule("THEN", 39);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_TO();
	partial void LeaveRule_TO();

	// $ANTLR start "TO"
	[GrammarRule("TO")]
	private void mTO()
	{
		EnterRule_TO();
		EnterRule("TO", 40);
		TraceIn("TO", 40);
		try
		{
			int _type = TO;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:46:4: ( 'to' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:46:6: 'to'
			{
			DebugLocation(46, 6);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TO", 40);
			LeaveRule("TO", 40);
			LeaveRule_TO();
		}
	}
	// $ANTLR end "TO"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 41);
		TraceIn("TYPE", 41);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:47:6: ( 'type' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:47:8: 'type'
			{
			DebugLocation(47, 8);
			Match("type"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 41);
			LeaveRule("TYPE", 41);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_VAR();
	partial void LeaveRule_VAR();

	// $ANTLR start "VAR"
	[GrammarRule("VAR")]
	private void mVAR()
	{
		EnterRule_VAR();
		EnterRule("VAR", 42);
		TraceIn("VAR", 42);
		try
		{
			int _type = VAR;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:48:5: ( 'var' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:48:7: 'var'
			{
			DebugLocation(48, 7);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VAR", 42);
			LeaveRule("VAR", 42);
			LeaveRule_VAR();
		}
	}
	// $ANTLR end "VAR"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 43);
		TraceIn("WHILE", 43);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:49:7: ( 'while' )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:49:9: 'while'
			{
			DebugLocation(49, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 43);
			LeaveRule("WHILE", 43);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_DEC_DIGIT();
	partial void LeaveRule_DEC_DIGIT();

	// $ANTLR start "DEC_DIGIT"
	[GrammarRule("DEC_DIGIT")]
	private void mDEC_DIGIT()
	{
		EnterRule_DEC_DIGIT();
		EnterRule("DEC_DIGIT", 44);
		TraceIn("DEC_DIGIT", 44);
		try
		{
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:87:5: ( ( '0' .. '9' ) )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:
			{
			DebugLocation(87, 5);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DEC_DIGIT", 44);
			LeaveRule("DEC_DIGIT", 44);
			LeaveRule_DEC_DIGIT();
		}
	}
	// $ANTLR end "DEC_DIGIT"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 45);
		TraceIn("LETTER", 45);
		try
		{
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:92:5: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:
			{
			DebugLocation(92, 5);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 45);
			LeaveRule("LETTER", 45);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 46);
		TraceIn("ESC_SEQ", 46);
		try
		{
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:97:5: ( '\\\\' ( 't' | 'n' | 'r' | '\\\"' | '\\\\' | UNICODE_ESC | ( WS )+ '\\\\' ) )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:97:9: '\\\\' ( 't' | 'n' | 'r' | '\\\"' | '\\\\' | UNICODE_ESC | ( WS )+ '\\\\' )
			{
			DebugLocation(97, 9);
			Match('\\'); 
			DebugLocation(98, 5);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:98:5: ( 't' | 'n' | 'r' | '\\\"' | '\\\\' | UNICODE_ESC | ( WS )+ '\\\\' )
			int alt2=7;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case 't':
				{
				alt2 = 1;
				}
				break;
			case 'n':
				{
				alt2 = 2;
				}
				break;
			case 'r':
				{
				alt2 = 3;
				}
				break;
			case '\"':
				{
				alt2 = 4;
				}
				break;
			case '\\':
				{
				alt2 = 5;
				}
				break;
			case '0':
			case '1':
				{
				alt2 = 6;
				}
				break;
			case '\t':
			case '\n':
			case '\r':
			case ' ':
				{
				alt2 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:99:6: 't'
				{
				DebugLocation(99, 6);
				Match('t'); 
				DebugLocation(99, 11);
				Text = "\t";

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:100:6: 'n'
				{
				DebugLocation(100, 6);
				Match('n'); 
				DebugLocation(100, 11);
				Text = "\n";

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:101:6: 'r'
				{
				DebugLocation(101, 6);
				Match('r'); 
				DebugLocation(101, 11);
				Text = "\r";

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:102:6: '\\\"'
				{
				DebugLocation(102, 6);
				Match('\"'); 
				DebugLocation(102, 11);
				Text = "\"";

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:103:6: '\\\\'
				{
				DebugLocation(103, 6);
				Match('\\'); 
				DebugLocation(103, 11);
				Text = "\\";

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:104:7: UNICODE_ESC
				{
				DebugLocation(104, 7);
				mUNICODE_ESC(); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:105:7: ( WS )+ '\\\\'
				{
				DebugLocation(105, 7);
				// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:105:7: ( WS )+
				int cnt1=0;
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if (((LA1_0>='\t' && LA1_0<='\n')||LA1_0=='\r'||LA1_0==' '))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch (alt1)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:105:7: WS
						{
						DebugLocation(105, 7);
						mWS(); 

						}
						break;

					default:
						if (cnt1 >= 1)
							goto loop1;

						EarlyExitException eee1 = new EarlyExitException( 1, input );
						DebugRecognitionException(eee1);
						throw eee1;
					}
					cnt1++;
				}
				loop1:
					;

				} finally { DebugExitSubRule(1); }

				DebugLocation(105, 11);
				Match('\\'); 
				DebugLocation(105, 16);
				Text = "";

				}
				break;

			}
			} finally { DebugExitSubRule(2); }


			}

		}
		finally
		{
			TraceOut("ESC_SEQ", 46);
			LeaveRule("ESC_SEQ", 46);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 47);
		TraceIn("UNICODE_ESC", 47);
		try
		{
			CommonToken d1 = default(CommonToken);
			CommonToken d2 = default(CommonToken);
			CommonToken d4 = default(CommonToken);
			int d3 = 0;
			int d5 = 0;

			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:112:5: ( '0' d1= DEC_DIGIT d2= DEC_DIGIT | '1' (d3= ( '0' | '1' ) d4= DEC_DIGIT | '2' d5= '1' .. '7' ) )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0=='0'))
			{
				alt4 = 1;
			}
			else if ((LA4_0=='1'))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:113:5: '0' d1= DEC_DIGIT d2= DEC_DIGIT
				{
				DebugLocation(113, 5);
				Match('0'); 
				DebugLocation(113, 12);
				int d1Start540 = CharIndex;
				int d1StartLine540 = Line;
				int d1StartCharPos540 = CharPositionInLine;
				mDEC_DIGIT(); 
				d1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, d1Start540, CharIndex-1);
				d1.Line = d1StartLine540;
				d1.CharPositionInLine = d1StartCharPos540;
				DebugLocation(113, 26);
				int d2Start545 = CharIndex;
				int d2StartLine545 = Line;
				int d2StartCharPos545 = CharPositionInLine;
				mDEC_DIGIT(); 
				d2 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, d2Start545, CharIndex-1);
				d2.Line = d2StartLine545;
				d2.CharPositionInLine = d2StartCharPos545;
				DebugLocation(113, 37);
				 Text = ((char)int.Parse(string.Format("0{0}{1}",(d1!=null?d1.Text:null), (d2!=null?d2.Text:null)))).ToString(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:114:7: '1' (d3= ( '0' | '1' ) d4= DEC_DIGIT | '2' d5= '1' .. '7' )
				{
				DebugLocation(114, 7);
				Match('1'); 
				DebugLocation(115, 5);
				// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:115:5: (d3= ( '0' | '1' ) d4= DEC_DIGIT | '2' d5= '1' .. '7' )
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='1')))
				{
					alt3 = 1;
				}
				else if ((LA3_0=='2'))
				{
					alt3 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:116:5: d3= ( '0' | '1' ) d4= DEC_DIGIT
					{
					DebugLocation(116, 7);
					d3= input.LA(1);
					input.Consume();

					DebugLocation(116, 20);
					int d4Start578 = CharIndex;
					int d4StartLine578 = Line;
					int d4StartCharPos578 = CharPositionInLine;
					mDEC_DIGIT(); 
					d4 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, d4Start578, CharIndex-1);
					d4.Line = d4StartLine578;
					d4.CharPositionInLine = d4StartCharPos578;
					DebugLocation(116, 31);
					 Text = ((char)int.Parse(string.Format("1{0}{1}",(char)d3,(d4!=null?d4.Text:null)))).ToString(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:117:7: '2' d5= '1' .. '7'
					{
					DebugLocation(117, 7);
					Match('2'); 
					DebugLocation(117, 13);

					d5 = input.LA(1);

					MatchRange('1','7'); 
					DebugLocation(117, 23);
					 Text = ((char)int.Parse(string.Format("12{0}",(char)d5))).ToString(); 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }


				}
				break;

			}
		}
		finally
		{
			TraceOut("UNICODE_ESC", 47);
			LeaveRule("UNICODE_ESC", 47);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 48);
		TraceIn("ID", 48);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:122:5: ( LETTER ( LETTER | DEC_DIGIT | '_' )* )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:122:9: LETTER ( LETTER | DEC_DIGIT | '_' )*
			{
			DebugLocation(122, 9);
			mLETTER(); 
			DebugLocation(122, 16);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:122:16: ( LETTER | DEC_DIGIT | '_' )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='0' && LA5_0<='9')||(LA5_0>='A' && LA5_0<='Z')||LA5_0=='_'||(LA5_0>='a' && LA5_0<='z')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:
					{
					DebugLocation(122, 16);
					input.Consume();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 48);
			LeaveRule("ID", 48);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 49);
		TraceIn("WS", 49);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:127:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:127:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
			{
			DebugLocation(127, 9);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:127:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='\t' && LA6_0<='\n')||LA6_0=='\r'||LA6_0==' '))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:
					{
					DebugLocation(127, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(131, 14);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 49);
			LeaveRule("WS", 49);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 50);
		TraceIn("COMMENT", 50);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:135:5: ( OC ( options {greedy=false; } : COMMENT |~ '/' | '/' ~ ( '*' | '/' ) )* CC )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:135:7: OC ( options {greedy=false; } : COMMENT |~ '/' | '/' ~ ( '*' | '/' ) )* CC
			{
			DebugLocation(135, 7);
			mOC(); 
			DebugLocation(135, 10);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:135:10: ( options {greedy=false; } : COMMENT |~ '/' | '/' ~ ( '*' | '/' ) )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=4;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0=='*'))
				{
					int LA7_1 = input.LA(2);

					if ((LA7_1=='/'))
					{
						alt7 = 4;
					}
					else if (((LA7_1>='\u0000' && LA7_1<='.')||(LA7_1>='0' && LA7_1<='\uFFFF')))
					{
						alt7 = 2;
					}


				}
				else if ((LA7_0=='/'))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2=='*'))
					{
						alt7 = 1;
					}
					else if (((LA7_2>='\u0000' && LA7_2<=')')||(LA7_2>='+' && LA7_2<='.')||(LA7_2>='0' && LA7_2<='\uFFFF')))
					{
						alt7 = 3;
					}


				}
				else if (((LA7_0>='\u0000' && LA7_0<=')')||(LA7_0>='+' && LA7_0<='.')||(LA7_0>='0' && LA7_0<='\uFFFF')))
				{
					alt7 = 2;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:135:38: COMMENT
					{
					DebugLocation(135, 38);
					mCOMMENT(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:135:48: ~ '/'
					{
					DebugLocation(135, 48);
					input.Consume();


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:135:54: '/' ~ ( '*' | '/' )
					{
					DebugLocation(135, 54);
					Match('/'); 
					DebugLocation(135, 58);
					input.Consume();


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(135, 72);
			mCC(); 
			DebugLocation(135, 75);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 50);
			LeaveRule("COMMENT", 50);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 51);
		TraceIn("INT", 51);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:139:5: ( ( DEC_DIGIT )+ )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:139:9: ( DEC_DIGIT )+
			{
			DebugLocation(139, 9);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:139:9: ( DEC_DIGIT )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if (((LA8_0>='0' && LA8_0<='9')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:
					{
					DebugLocation(139, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 51);
			LeaveRule("INT", 51);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 52);
		TraceIn("STRING", 52);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			int val = 0;


				var inString = "";

			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:147:5: ( DQUOTE ( ESC_SEQ | ' ' | '!' |val= '#' .. '[' |val= ']' .. '~' )* DQUOTE )
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:147:8: DQUOTE ( ESC_SEQ | ' ' | '!' |val= '#' .. '[' |val= ']' .. '~' )* DQUOTE
			{
			DebugLocation(147, 8);
			mDQUOTE(); 
			DebugLocation(148, 5);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:148:5: ( ESC_SEQ | ' ' | '!' |val= '#' .. '[' |val= ']' .. '~' )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=6;
				try { DebugEnterDecision(9, false);
				switch (input.LA(1))
				{
				case '\\':
					{
					alt9 = 1;
					}
					break;
				case ' ':
					{
					alt9 = 2;
					}
					break;
				case '!':
					{
					alt9 = 3;
					}
					break;
				case '#':
				case '$':
				case '%':
				case '&':
				case '\'':
				case '(':
				case ')':
				case '*':
				case '+':
				case ',':
				case '-':
				case '.':
				case '/':
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
				case ':':
				case ';':
				case '<':
				case '=':
				case '>':
				case '?':
				case '@':
				case 'A':
				case 'B':
				case 'C':
				case 'D':
				case 'E':
				case 'F':
				case 'G':
				case 'H':
				case 'I':
				case 'J':
				case 'K':
				case 'L':
				case 'M':
				case 'N':
				case 'O':
				case 'P':
				case 'Q':
				case 'R':
				case 'S':
				case 'T':
				case 'U':
				case 'V':
				case 'W':
				case 'X':
				case 'Y':
				case 'Z':
				case '[':
					{
					alt9 = 4;
					}
					break;
				case ']':
				case '^':
				case '_':
				case '`':
				case 'a':
				case 'b':
				case 'c':
				case 'd':
				case 'e':
				case 'f':
				case 'g':
				case 'h':
				case 'i':
				case 'j':
				case 'k':
				case 'l':
				case 'm':
				case 'n':
				case 'o':
				case 'p':
				case 'q':
				case 'r':
				case 's':
				case 't':
				case 'u':
				case 'v':
				case 'w':
				case 'x':
				case 'y':
				case 'z':
				case '{':
				case '|':
				case '}':
				case '~':
					{
					alt9 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:148:7: ESC_SEQ
					{
					DebugLocation(148, 7);
					mESC_SEQ(); 
					DebugLocation(148, 15);
					inString += Text;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:149:6: ' '
					{
					DebugLocation(149, 6);
					Match(' '); 
					DebugLocation(149, 10);
					inString += " ";

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:150:6: '!'
					{
					DebugLocation(150, 6);
					Match('!'); 
					DebugLocation(150, 10);
					inString += "!";

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:151:7: val= '#' .. '['
					{
					DebugLocation(151, 11);

					val = input.LA(1);

					MatchRange('#','['); 
					DebugLocation(151, 22);
					inString += ((char)val).ToString();

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:152:7: val= ']' .. '~'
					{
					DebugLocation(152, 11);

					val = input.LA(1);

					MatchRange(']','~'); 
					DebugLocation(152, 22);
					inString += ((char)val).ToString();

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(152, 62);
			mDQUOTE(); 
			DebugLocation(152, 69);
			 Text = inString; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 52);
			LeaveRule("STRING", 52);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	public override void mTokens()
	{
		// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:8: ( AND | ARRAY | ASSIGN | BREAK | CB | CBRACE | CC | COLON | COMMA | CP | DIF | DIV | DO | DOT | DQUOTE | ELSE | END | EQUAL | FOR | FUNCTION | GT | GTE | IF | IN | LET | LT | LTE | MINUS | MULT | NIL | OB | OBRACE | OC | OF | OP | OR | PLUS | SEMI | THEN | TO | TYPE | VAR | WHILE | ID | WS | COMMENT | INT | STRING )
		int alt10=48;
		try { DebugEnterDecision(10, false);
		try
		{
			alt10 = dfa10.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(10); }
		switch (alt10)
		{
		case 1:
			DebugEnterAlt(1);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:14: ARRAY
			{
			DebugLocation(1, 14);
			mARRAY(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:20: ASSIGN
			{
			DebugLocation(1, 20);
			mASSIGN(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:27: BREAK
			{
			DebugLocation(1, 27);
			mBREAK(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:33: CB
			{
			DebugLocation(1, 33);
			mCB(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:36: CBRACE
			{
			DebugLocation(1, 36);
			mCBRACE(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:43: CC
			{
			DebugLocation(1, 43);
			mCC(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:46: COLON
			{
			DebugLocation(1, 46);
			mCOLON(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:52: COMMA
			{
			DebugLocation(1, 52);
			mCOMMA(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:58: CP
			{
			DebugLocation(1, 58);
			mCP(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:61: DIF
			{
			DebugLocation(1, 61);
			mDIF(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:65: DIV
			{
			DebugLocation(1, 65);
			mDIV(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:69: DO
			{
			DebugLocation(1, 69);
			mDO(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:72: DOT
			{
			DebugLocation(1, 72);
			mDOT(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:76: DQUOTE
			{
			DebugLocation(1, 76);
			mDQUOTE(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:83: ELSE
			{
			DebugLocation(1, 83);
			mELSE(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:88: END
			{
			DebugLocation(1, 88);
			mEND(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:92: EQUAL
			{
			DebugLocation(1, 92);
			mEQUAL(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:98: FOR
			{
			DebugLocation(1, 98);
			mFOR(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:102: FUNCTION
			{
			DebugLocation(1, 102);
			mFUNCTION(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:111: GT
			{
			DebugLocation(1, 111);
			mGT(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:114: GTE
			{
			DebugLocation(1, 114);
			mGTE(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:118: IF
			{
			DebugLocation(1, 118);
			mIF(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:121: IN
			{
			DebugLocation(1, 121);
			mIN(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:124: LET
			{
			DebugLocation(1, 124);
			mLET(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:128: LT
			{
			DebugLocation(1, 128);
			mLT(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:131: LTE
			{
			DebugLocation(1, 131);
			mLTE(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:135: MINUS
			{
			DebugLocation(1, 135);
			mMINUS(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:141: MULT
			{
			DebugLocation(1, 141);
			mMULT(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:146: NIL
			{
			DebugLocation(1, 146);
			mNIL(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:150: OB
			{
			DebugLocation(1, 150);
			mOB(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:153: OBRACE
			{
			DebugLocation(1, 153);
			mOBRACE(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:160: OC
			{
			DebugLocation(1, 160);
			mOC(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:163: OF
			{
			DebugLocation(1, 163);
			mOF(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:166: OP
			{
			DebugLocation(1, 166);
			mOP(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:169: OR
			{
			DebugLocation(1, 169);
			mOR(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:172: PLUS
			{
			DebugLocation(1, 172);
			mPLUS(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:177: SEMI
			{
			DebugLocation(1, 177);
			mSEMI(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:182: THEN
			{
			DebugLocation(1, 182);
			mTHEN(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:187: TO
			{
			DebugLocation(1, 187);
			mTO(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:190: TYPE
			{
			DebugLocation(1, 190);
			mTYPE(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:195: VAR
			{
			DebugLocation(1, 195);
			mVAR(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:199: WHILE
			{
			DebugLocation(1, 199);
			mWHILE(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:205: ID
			{
			DebugLocation(1, 205);
			mID(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:208: WS
			{
			DebugLocation(1, 208);
			mWS(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:211: COMMENT
			{
			DebugLocation(1, 211);
			mCOMMENT(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:219: INT
			{
			DebugLocation(1, 219);
			mINT(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// E:\\SCHOOL!!!\\Computer Science\\Tiger\\Proyecto de Compilación 10.3.14\\CODIGO\\Tiger\\Tiger\\00 ANTLR\\tiger.g:1:223: STRING
			{
			DebugLocation(1, 223);
			mSTRING(); 

			}
			break;

		}

	}


	#region DFA
	DFA10 dfa10;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa10 = new DFA10(this, SpecialStateTransition10);
	}

	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x2\xFFFF\x1\x21\x1\x26\x1\x21\x2\xFFFF\x1\x29\x2\xFFFF\x1\x2C\x1\x2E"+
			"\x1\x21\x1\xFFFF\x1\x30\x1\x21\x1\xFFFF\x1\x21\x1\x37\x2\x21\x1\xFFFF"+
			"\x1\x21\x2\xFFFF\x1\x21\x4\xFFFF\x3\x21\x3\xFFFF\x1\x21\x2\xFFFF\x1\x21"+
			"\x5\xFFFF\x1\x44\x1\xFFFF\x1\x46\x2\xFFFF\x4\x21\x2\xFFFF\x1\x4B\x1\x4C"+
			"\x2\x21\x1\x4F\x1\x21\x1\x51\x5\x21\x3\xFFFF\x1\x21\x1\x58\x1\x59\x1"+
			"\x21\x2\xFFFF\x1\x5B\x1\x5C\x1\xFFFF\x1\x21\x1\xFFFF\x1\x21\x1\x5F\x3"+
			"\x21\x1\x63\x2\xFFFF\x1\x21\x2\xFFFF\x1\x65\x1\x66\x1\xFFFF\x1\x21\x1"+
			"\x68\x1\x69\x1\xFFFF\x1\x21\x2\xFFFF\x1\x6B\x2\xFFFF\x1\x21\x1\xFFFF"+
			"\x1\x21\x1\x6E\x1\xFFFF";
		private const string DFA10_eofS =
			"\x6F\xFFFF";
		private const string DFA10_minS =
			"\x1\x9\x1\xFFFF\x1\x72\x1\x3D\x1\x72\x2\xFFFF\x1\x2F\x2\xFFFF\x1\x3D"+
			"\x1\x2A\x1\x6F\x1\xFFFF\x1\x20\x1\x6C\x1\xFFFF\x1\x6F\x1\x3D\x1\x66\x1"+
			"\x65\x1\xFFFF\x1\x69\x2\xFFFF\x1\x66\x4\xFFFF\x1\x68\x1\x61\x1\x68\x3"+
			"\xFFFF\x1\x72\x2\xFFFF\x1\x65\x5\xFFFF\x1\x0\x1\xFFFF\x1\x30\x2\xFFFF"+
			"\x1\x73\x1\x64\x1\x72\x1\x6E\x2\xFFFF\x2\x30\x1\x74\x1\x6C\x1\x30\x1"+
			"\x65\x1\x30\x1\x70\x1\x72\x1\x69\x2\x61\x3\xFFFF\x1\x65\x2\x30\x1\x63"+
			"\x2\xFFFF\x2\x30\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x65\x1\x30\x1\x6C\x1\x79"+
			"\x1\x6B\x1\x30\x2\xFFFF\x1\x74\x2\xFFFF\x2\x30\x1\xFFFF\x1\x65\x2\x30"+
			"\x1\xFFFF\x1\x69\x2\xFFFF\x1\x30\x2\xFFFF\x1\x6F\x1\xFFFF\x1\x6E\x1\x30"+
			"\x1\xFFFF";
		private const string DFA10_maxS =
			"\x1\x7D\x1\xFFFF\x1\x72\x1\x3D\x1\x72\x2\xFFFF\x1\x2F\x2\xFFFF\x1\x3E"+
			"\x1\x2A\x1\x6F\x1\xFFFF\x1\x7E\x1\x6E\x1\xFFFF\x1\x75\x1\x3D\x1\x6E\x1"+
			"\x65\x1\xFFFF\x1\x69\x2\xFFFF\x1\x66\x4\xFFFF\x1\x79\x1\x61\x1\x68\x3"+
			"\xFFFF\x1\x72\x2\xFFFF\x1\x65\x5\xFFFF\x1\xFFFF\x1\xFFFF\x1\x7A\x2\xFFFF"+
			"\x1\x73\x1\x64\x1\x72\x1\x6E\x2\xFFFF\x2\x7A\x1\x74\x1\x6C\x1\x7A\x1"+
			"\x65\x1\x7A\x1\x70\x1\x72\x1\x69\x2\x61\x3\xFFFF\x1\x65\x2\x7A\x1\x63"+
			"\x2\xFFFF\x2\x7A\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x65\x1\x7A\x1\x6C\x1\x79"+
			"\x1\x6B\x1\x7A\x2\xFFFF\x1\x74\x2\xFFFF\x2\x7A\x1\xFFFF\x1\x65\x2\x7A"+
			"\x1\xFFFF\x1\x69\x2\xFFFF\x1\x7A\x2\xFFFF\x1\x6F\x1\xFFFF\x1\x6E\x1\x7A"+
			"\x1\xFFFF";
		private const string DFA10_acceptS =
			"\x1\xFFFF\x1\x1\x3\xFFFF\x1\x5\x1\x6\x1\xFFFF\x1\x9\x1\xA\x3\xFFFF\x1"+
			"\xE\x2\xFFFF\x1\x12\x4\xFFFF\x1\x1C\x1\xFFFF\x1\x1F\x1\x20\x1\xFFFF\x1"+
			"\x23\x1\x24\x1\x25\x1\x26\x3\xFFFF\x1\x2C\x1\x2D\x1\x2F\x1\xFFFF\x1\x3"+
			"\x1\x8\x1\xFFFF\x1\x7\x1\x1D\x1\xB\x1\x1B\x1\x1A\x1\xFFFF\x1\xC\x1\xFFFF"+
			"\x1\xF\x1\x30\x4\xFFFF\x1\x16\x1\x15\xC\xFFFF\x1\x21\x1\x2E\x1\xD\x4"+
			"\xFFFF\x1\x17\x1\x18\x2\xFFFF\x1\x22\x1\xFFFF\x1\x28\x6\xFFFF\x1\x11"+
			"\x1\x13\x1\xFFFF\x1\x19\x1\x1E\x2\xFFFF\x1\x2A\x3\xFFFF\x1\x10\x1\xFFFF"+
			"\x1\x27\x1\x29\x1\xFFFF\x1\x2\x1\x4\x1\xFFFF\x1\x2B\x2\xFFFF\x1\x14";
		private const string DFA10_specialS =
			"\x2D\xFFFF\x1\x0\x41\xFFFF}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x2\x22\x2\xFFFF\x1\x22\x12\xFFFF\x1\x22\x1\xFFFF\x1\xE\x3\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\x1A\x1\x9\x1\x7\x1\x1C\x1\x8\x1\x15\x1\xD\x1\xB\xA\x23"+
				"\x1\x3\x1\x1D\x1\xA\x1\x10\x1\x12\x2\xFFFF\x1A\x21\x1\x17\x1\xFFFF\x1"+
				"\x5\x3\xFFFF\x1\x2\x1\x4\x1\x21\x1\xC\x1\xF\x1\x11\x2\x21\x1\x13\x2"+
				"\x21\x1\x14\x1\x21\x1\x16\x1\x19\x4\x21\x1\x1E\x1\x21\x1\x1F\x1\x20"+
				"\x3\x21\x1\x18\x1\x1B\x1\x6",
				"",
				"\x1\x24",
				"\x1\x25",
				"\x1\x27",
				"",
				"",
				"\x1\x28",
				"",
				"",
				"\x1\x2B\x1\x2A",
				"\x1\x2D",
				"\x1\x2F",
				"",
				"\x5F\x31",
				"\x1\x32\x1\xFFFF\x1\x33",
				"",
				"\x1\x34\x5\xFFFF\x1\x35",
				"\x1\x36",
				"\x1\x38\x7\xFFFF\x1\x39",
				"\x1\x3A",
				"",
				"\x1\x3B",
				"",
				"",
				"\x1\x3C",
				"",
				"",
				"",
				"",
				"\x1\x3D\x6\xFFFF\x1\x3E\x9\xFFFF\x1\x3F",
				"\x1\x40",
				"\x1\x41",
				"",
				"",
				"",
				"\x1\x42",
				"",
				"",
				"\x1\x43",
				"",
				"",
				"",
				"",
				"",
				"\x0\x45",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"\x1\x47",
				"\x1\x48",
				"\x1\x49",
				"\x1\x4A",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x4D",
				"\x1\x4E",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x50",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x52",
				"\x1\x53",
				"\x1\x54",
				"\x1\x55",
				"\x1\x56",
				"",
				"",
				"",
				"\x1\x57",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x5A",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"\x1\x5D",
				"",
				"\x1\x5E",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"\x1\x64",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"\x1\x67",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"\x1\x6A",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"\x1\x6C",
				"",
				"\x1\x6D",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				""
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | ARRAY | ASSIGN | BREAK | CB | CBRACE | CC | COLON | COMMA | CP | DIF | DIV | DO | DOT | DQUOTE | ELSE | END | EQUAL | FOR | FUNCTION | GT | GTE | IF | IN | LET | LT | LTE | MINUS | MULT | NIL | OB | OBRACE | OC | OF | OP | OR | PLUS | SEMI | THEN | TO | TYPE | VAR | WHILE | ID | WS | COMMENT | INT | STRING );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition10(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA10_45 = input.LA(1);

				s = -1;
				if (((LA10_45>='\u0000' && LA10_45<='\uFFFF'))) {s = 69;}

				else s = 68;

				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 10, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}
